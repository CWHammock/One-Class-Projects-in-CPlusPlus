Script started on Tue 05 Apr 2016 12:46:16 PM EDT
]0;cwh3@pluto:~/CS519[cwh3@pluto CS519]$ cat h[Klklki[K[Kist.h

#ifndef LKLIST_H
#define LKLIST_H

//============================================================================
// Name        : lklist.h
// Author      : Warren Hammock
// Date        : April 2, 2016
// Description : Create a template class for a linked list and an iterator
//               for the list.  Only driver needed to utilize the linked
//               list and iterator.
//============================================================================


template<class T>
struct node
{
	T value;
	node* next;
	node* prev;
};

template<class T>
class lklist
{
public:
    friend class iterator;
		class iterator
        {
      public:
      friend class lklist<T>;
      //move iterator forward by one then evaluate
      iterator& operator ++() {loc = loc -> next; return *this;}
      //move iterator back by one then evaluate
      iterator& operator --() {loc = loc -> prev; return *this;}
      //evaluate and move iterator forward by one
      iterator operator ++(int junk) {iterator temp = *this; loc = loc -> next; return temp;}
      //evaluate and move iterator back by one
      iterator operator --(int junk) {iterator temp = *this; loc = loc -> prev; return temp;}
      //compares two iterators to determine if they are pointing to same
      bool operator == (const iterator rhs) {return (loc == rhs.loc);}
      //compares two iterators to determine if they are not pointing to same point
      bool operator != (const iterator rhs) {return (loc != rhs.loc);}
      //outputs display of value the iterator is pointing to
      const T& operator *() const {return loc -> value;}
      private:
      node<T> * loc;
      iterator(node<T> * l) {loc = l;}
};
    lklist();
    virtual ~lklist(); //deconstructor
    lklist(const lklist<T>& listOne); //copy constructor
    lklist<T>& operator =(const lklist<T>& listOne); //deep copies one list into another
    int size(); //counts the number of values of list
    bool empty(); //checks to see if list is empty
    void pushFront(const T& newValue);  //pushes value before head pointer node
    void pushBack(const T& newValue);  //pushes value before node
    node<T>* find(const T newValue);    //locates a value
    void erase(node<T>* toDelete); //deletes value
    void clearList();   //clears all values from the list and leaves head
    iterator begin(){return (lklist<T>::iterator(head->next));}
    iterator end(){return (lklist<T>::iterator(head));}


private:
	node<T>* head;
};
//default constructor
template<class T>
lklist<T>::lklist()
{
    head = new node<T>;
    head->prev = head;
    head->next = head;
}
//--------------------------
//copy constructor
template<class T>
lklist<T>::lklist(const lklist<T>& listIn){

    head = new node<T>;
    head->prev = head;
    head->next = head;
    node<T>* temp = listIn.head;
    while (temp->next != listIn.head){

        temp = temp->next;
        pushBack(temp->value);
    }
}
//--------------------------
//deconstruct
template<class T>
lklist<T>::~lklist(){

    while (head->next != head){
        erase(head->next);
    }
    delete head;
}
//--------------------------
//returns the number of values in the list
template<class T>
int lklist<T>::size(){
    node<T>* temp;
    temp = head;
    int counter =  0;
    while (temp->next != head){

        temp = temp->next;
        counter++;
    }
    return counter;
}
//--------------------------
//checks if the list is empty
template<class T>
bool lklist<T>::empty(){
    return (head->next == head);
}
//--------------------------
//places value and node after head
template<class T>
void lklist<T>::pushFront(const T& newValue){
	node<T>* nextNode;
	nextNode = new node<T>;
	nextNode->value = newValue;
	nextNode->prev = head;
	nextNode->next = head->next;
	head->next->prev = nextNode;
	head->next = nextNode;
}
//--------------------------
//places new value and node before head
template<class T>
void lklist<T>::pushBack(const T& newValue){
	node<T>* nextNode;
	nextNode = new node<T>;
	nextNode->value = newValue;
	nextNode->prev = head->prev;
	nextNode->next = head;
	head->prev->next = nextNode;
	head->prev = nextNode;
}
//--------------------------
//find the position of node by its value
template<class T>
node<T>* lklist<T>::find(const T valueToFind){
    node<T>* temp;
    temp = head;
    while (temp->value != valueToFind && temp->next != head){
        temp = temp->next;
    }
    return temp;
}
//--------------------------
//takes in a node and deletes it
template<class T>
void lklist<T>::erase(node<T>* toDelete){
    toDelete->next->prev = toDelete->prev;
    toDelete->prev->next = toDelete->next;
    delete toDelete;
}
//--------------------------
//deep copies one list into another
template<class T>
lklist<T>& lklist<T>::operator =(const lklist<T>& listOne){
    if (head == listOne.head){
		head = new node<T>;
	}
	if(head->next != head){
        clearList();
    }
    node<T>* temp = listOne.head;
    while (temp->next != listOne.head){
        temp = temp->next;
        pushBack(temp->value);
    }
    return *this;
}

//--------------------------
//clears all values from list
template<class T>
void lklist<T>::clearList(){
    while (head->next != head){
        node<T>* temp = head->next;
        temp->next->prev = temp->prev;
        temp->prev->next = temp->next;
        delete temp;
    }
}


#endif
]0;cwh3@pluto:~/CS519[cwh3@pluto CS519]$ cat hw7.cpp
#include <iostream>
#include <cstdlib>
#include "lklist.h"

using std::cout;
using std::endl;



int main()
{
  // initialize lists
  cout << "create, populate(10 num) and print list" << endl;
  cout << "---------------------------------------" << endl;
  lklist<int> newlist;
  srand(time(0));
  for (int i = 0; i < 10; i++){newlist.pushFront(rand()%99+1);}
  for(lklist<int>::iterator itr = newlist.begin(); itr != newlist.end(); itr++)
  cout << *itr << endl; cout << endl;
  cout << "---------------------------------------" << endl;
  cout << "test == and !=" << endl;
  cout << "---------------------------------------" << endl;
  lklist<int>::iterator a = newlist.begin();
  lklist<int>::iterator b = --(newlist.end());
  lklist<int>::iterator c = newlist.begin();
  cout << "a = newlist.begin(); " << *a << endl;
  cout << "b = --(newlist.end()); " << *b << endl;
  cout << "c = newlist.begin(); " << *c <<endl;
  cout << "1. a == b? ";
  if (a==b){cout << "true" << endl;} else if (a!=b) {cout << "false" << endl;}
  cout << "2. b == c? ";
  if (b==c){cout << "true" << endl;} else if (b!=c) {cout << "false" << endl;}
  cout << "3. a == c? ";
  if (a==c){cout << "true" << endl;} else if (a!=c) {cout << "false" << endl;}
  lklist<int> list;
  cout << "---------------------------------------" << endl;
  cout << "create, populate(10 num) and print list" << endl;
  cout << "---------------------------------------" << endl;
  srand(time(0));
  for (int i = 0; i < 10; i++){list.pushFront(rand()%99+1);}
  for(lklist<int>::iterator itr = list.begin(); itr != list.end(); itr++)
  cout << *itr << endl;
  cout << "---------------------------------------" << endl;
  cout << "test ++" << endl;
  cout << "---------------------------------------" << endl;
  lklist<int>::iterator first = list.begin();
  cout << *first << " " << "print num at beginning" << endl;
  cout << *first++ << " " << "num++" << endl;
  cout << *first << " " << "print num" << endl;
  cout << *++first << " " << "++num" <<endl;
  cout << *first << " " << "print num" << endl;
  cout << "---------------------------------------" << endl;
  cout << "test --" << endl;
  cout << "---------------------------------------" << endl;
  lklist<int>::iterator last = list.end();
  cout << *last << " " << "print num/head value" << endl;
  cout << *last-- << " " << "num--" << endl;
  cout << *last << " " << "print num" << endl;
  cout << *--last << " " << "--num" <<endl;
  cout << *last << " " << "print num" << endl;
}

]0;cwh3@pluto:~/CS519[cwh3@pluto CS519]$ ./hw7.cp[K[K[K
create, populate(10 num) and print list
---------------------------------------
3
65
7
52
71
38
66
72
60
13

---------------------------------------
test == and !=
---------------------------------------
a = newlist.begin(); 3
b = --(newlist.end()); 13
c = newlist.begin(); 3
1. a == b? false
2. b == c? false
3. a == c? true
---------------------------------------
create, populate(10 num) and print list
---------------------------------------
3
65
7
52
71
38
66
72
60
13
---------------------------------------
test ++
---------------------------------------
3 print num at beginning
3 num++
65 print num
7 ++num
7 print num
---------------------------------------
test --
---------------------------------------
0 print num/head value
0 num--
13 print num
60 --num
60 print num
]0;cwh3@pluto:~/CS519[cwh3@pluto CS519]$ exit
exit

Script done on Tue 05 Apr 2016 12:46:42 PM EDT
